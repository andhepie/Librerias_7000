unit uTJSONToTreeView;

interface

uses Classes, Vcl.ComCtrls;

Type

  TJsonToTreeView = class(TObject)
  private
    FTreeView: TTreeView;

    procedure _generarArbol(ss: string; parent: TTreeNode);
  public
    constructor create;
    destructor destroy; override;

    procedure generarArbol(JsonString: string);

  published
    property TreeView: TTreeView read FTreeView;
  end;

implementation

{ TJsonToTreeView }

constructor TJsonToTreeView.create;
begin

end;

destructor TJsonToTreeView.destroy;
begin

  inherited;
end;

procedure TJsonToTreeView.generarArbol(JsonString: string);
begin

end;

procedure TJsonToTreeView._generarArbol(ss: string; parent: TTreeNode);
var
  JSON: TJSONObject;
  JSONArray: TJSONArray;

  i, j, cantidad: integer;
  JSONValue: TJSONValue;
  JsonString: TJSONString;
  nPadre: TTreeNode;
begin
  ImprimirS('recibe => ' + ss);
  JSON := TJSONObject.ParseJSONValue(ss) as TJSONObject;
  ImprimirS('JSON => ' + JSON.ToString);

  nPadre := TTreeNode.create(nil);

  for i := 1 to JSON.Count do
  begin
    ImprimirS('Entre a las propiedades JSON');
    JSONValue := JSON.Pairs[i - 1].JSONValue;
    JsonString := JSON.Pairs[i - 1].JsonString;

    if JSONValue.ToString[1] = '[' then
    begin
      ImprimirS('Posible Array => ' + JSONValue.ToString);

      JSONArray := TJSONObject.ParseJSONValue(JSONValue.ToString) as TJSONArray;
      cantidad := JSONArray.Count;

      ImprimirS('Cantidad: ' + IntToStr(cantidad));

      nPadre := TvArbol.Items.AddChild(padre, JsonString.Value);

      for j := 1 to cantidad do
      begin
        ImprimirS(JSONArray.Get(j - 1).ToString);

        generarArbol(JSONArray.Get(j - 1).ToString,
          TvArbol.Items.AddChild(nPadre, IntToStr(j - 1)));
      end;
    end
    else
      nPadre := TvArbol.Items.AddChild(padre, JsonString.Value);

    Imprimir(JSONValue.Value, nPadre);

    if JSONValue is TJSONObject then
      generarArbol(JSONValue.ToString, nPadre);
  end;
end;

end.
